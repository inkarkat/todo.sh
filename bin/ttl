#!/bin/bash

TODO_DIR="$(git root 2>/dev/null)"
DONE_DIR=''
if [ -n "$TODO_DIR" ]; then
    gitDir=$(git rev-parse --absolute-git-dir 2>/dev/null)
    if [ -n "$gitDir" ]; then
	DONE_DIR="${gitDir}/todo"
    fi
else
    TODO_DIR="$(findup --stop-at-first todo.txt 2>/dev/null | inputToArg dirname)"
fi
if [ -z "$DONE_DIR" ]; then
    DONE_DIR="${HOME}/.local/share/todo-local/$(pathAsFilename --encode "$PWD")"
fi

printUsage()
{
    local archiveDestination='.git/todo if within a Git working copy or else into ~/.local/share/todo-local/<path+to+dir>/done.txt'
    [ -n "$TODO_DIR" ] && archiveDestination="${DONE_DIR:?}/done.txt"

    cat <<HELPTEXT
Local task list, using ${TODO_DIR:-"a todo.txt found in the current directory or one of its
parents"}${TODO_DIR:+/todo.txt}, and auto-archives into $archiveDestination
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[TODOTXT_ARGs ...] action [task_number] [task_description] [-?|-h|--help]'
}
case "$1" in
    help|--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac

TODO_FILE="${TODO_DIR:?}/todo.txt"
DONE_FILE="${DONE_DIR:?}/done.txt"
touch-p --no-create -- "$TODO_FILE" "$DONE_FILE"

export TODO_DIR TODO_FILE DONE_FILE REPORT_FILE=/dev/null TODOTXT_BACKUP_DIR=''
finally()
{
    # Move the backup copy into the DONE_DIR so that it's out of sight (but
    # still accessible should it be necessary to undo the last modification).
    [ -r "${TODO_FILE}.bak" ] && mv --force -- "${TODO_FILE}.bak" "${DONE_DIR}/"

    # Remove a completely empty todo.txt file.
    [ -s "$TODO_FILE" ] || rm -- "$TODO_FILE" 2>/dev/null
}
trap finally EXIT

todo.sh -A "$@"
